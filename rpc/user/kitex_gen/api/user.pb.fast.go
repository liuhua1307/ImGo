// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *UserRegisterReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserRegisterReq[number], err)
}

func (x *UserRegisterReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserRegisterReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PassWord, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserRegisterReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v UserInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserInfo = &v
	return offset, nil
}

func (x *UserInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserInfo[number], err)
}

func (x *UserInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *UserInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Sex, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UserInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.PhoneNumber, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserRegisterReply) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserRegisterReply[number], err)
}

func (x *UserRegisterReply) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserRegisterReply) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UserLoginReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserLoginReq[number], err)
}

func (x *UserLoginReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Credential, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserLoginReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserLoginReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *UserLoginReply) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserLoginReply[number], err)
}

func (x *UserLoginReply) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserLoginReply) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserGetUserInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserGetUserInfoReq[number], err)
}

func (x *UserGetUserInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Credential, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserGetUserInfoReply) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserGetUserInfoReply[number], err)
}

func (x *UserGetUserInfoReply) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v UserInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UserInfo = &v
	return offset, nil
}

func (x *UserMakeFriendWithIDReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserMakeFriendWithIDReq[number], err)
}

func (x *UserMakeFriendWithIDReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OriID, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *UserMakeFriendWithIDReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TargetID, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *UserRegisterReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UserRegisterReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserName())
	return offset
}

func (x *UserRegisterReq) fastWriteField2(buf []byte) (offset int) {
	if x.PassWord == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassWord())
	return offset
}

func (x *UserRegisterReq) fastWriteField3(buf []byte) (offset int) {
	if x.UserInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetUserInfo())
	return offset
}

func (x *UserInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *UserInfo) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *UserInfo) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UserInfo) fastWriteField3(buf []byte) (offset int) {
	if x.Sex == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 3, x.GetSex())
	return offset
}

func (x *UserInfo) fastWriteField4(buf []byte) (offset int) {
	if x.PhoneNumber == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPhoneNumber())
	return offset
}

func (x *UserRegisterReply) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UserRegisterReply) fastWriteField1(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMsg())
	return offset
}

func (x *UserRegisterReply) fastWriteField2(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetCode())
	return offset
}

func (x *UserLoginReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UserLoginReq) fastWriteField1(buf []byte) (offset int) {
	if x.Credential == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCredential())
	return offset
}

func (x *UserLoginReq) fastWriteField2(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *UserLoginReq) fastWriteField3(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 3, x.GetStatus())
	return offset
}

func (x *UserLoginReply) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UserLoginReply) fastWriteField1(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetToken())
	return offset
}

func (x *UserLoginReply) fastWriteField2(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMessage())
	return offset
}

func (x *UserGetUserInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UserGetUserInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Credential == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCredential())
	return offset
}

func (x *UserGetUserInfoReply) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UserGetUserInfoReply) fastWriteField1(buf []byte) (offset int) {
	if x.UserInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetUserInfo())
	return offset
}

func (x *UserMakeFriendWithIDReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UserMakeFriendWithIDReq) fastWriteField1(buf []byte) (offset int) {
	if x.OriID == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetOriID())
	return offset
}

func (x *UserMakeFriendWithIDReq) fastWriteField2(buf []byte) (offset int) {
	if x.TargetID == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetTargetID())
	return offset
}

func (x *UserRegisterReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UserRegisterReq) sizeField1() (n int) {
	if x.UserName == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserName())
	return n
}

func (x *UserRegisterReq) sizeField2() (n int) {
	if x.PassWord == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassWord())
	return n
}

func (x *UserRegisterReq) sizeField3() (n int) {
	if x.UserInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetUserInfo())
	return n
}

func (x *UserInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *UserInfo) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetID())
	return n
}

func (x *UserInfo) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UserInfo) sizeField3() (n int) {
	if x.Sex == 0 {
		return n
	}
	n += fastpb.SizeUint32(3, x.GetSex())
	return n
}

func (x *UserInfo) sizeField4() (n int) {
	if x.PhoneNumber == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPhoneNumber())
	return n
}

func (x *UserRegisterReply) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UserRegisterReply) sizeField1() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMsg())
	return n
}

func (x *UserRegisterReply) sizeField2() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetCode())
	return n
}

func (x *UserLoginReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UserLoginReq) sizeField1() (n int) {
	if x.Credential == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCredential())
	return n
}

func (x *UserLoginReq) sizeField2() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *UserLoginReq) sizeField3() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeUint32(3, x.GetStatus())
	return n
}

func (x *UserLoginReply) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UserLoginReply) sizeField1() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetToken())
	return n
}

func (x *UserLoginReply) sizeField2() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMessage())
	return n
}

func (x *UserGetUserInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UserGetUserInfoReq) sizeField1() (n int) {
	if x.Credential == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCredential())
	return n
}

func (x *UserGetUserInfoReply) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UserGetUserInfoReply) sizeField1() (n int) {
	if x.UserInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetUserInfo())
	return n
}

func (x *UserMakeFriendWithIDReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UserMakeFriendWithIDReq) sizeField1() (n int) {
	if x.OriID == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetOriID())
	return n
}

func (x *UserMakeFriendWithIDReq) sizeField2() (n int) {
	if x.TargetID == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetTargetID())
	return n
}

var fieldIDToName_UserRegisterReq = map[int32]string{
	1: "UserName",
	2: "PassWord",
	3: "UserInfo",
}

var fieldIDToName_UserInfo = map[int32]string{
	1: "ID",
	2: "Name",
	3: "Sex",
	4: "PhoneNumber",
}

var fieldIDToName_UserRegisterReply = map[int32]string{
	1: "Msg",
	2: "Code",
}

var fieldIDToName_UserLoginReq = map[int32]string{
	1: "Credential",
	2: "Password",
	3: "Status",
}

var fieldIDToName_UserLoginReply = map[int32]string{
	1: "Token",
	2: "Message",
}

var fieldIDToName_UserGetUserInfoReq = map[int32]string{
	1: "Credential",
}

var fieldIDToName_UserGetUserInfoReply = map[int32]string{
	1: "UserInfo",
}

var fieldIDToName_UserMakeFriendWithIDReq = map[int32]string{
	1: "OriID",
	2: "TargetID",
}
