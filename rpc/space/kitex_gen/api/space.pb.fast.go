// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *SpaceGetFocusDynamicReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SpaceGetFocusDynamicReq[number], err)
}

func (x *SpaceGetFocusDynamicReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TargetID, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *SpaceGetFocusDynamicReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SpaceGetFocusDynamicReply) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SpaceGetFocusDynamicReply[number], err)
}

func (x *SpaceGetFocusDynamicReply) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Dynamic
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Dynamic = append(x.Dynamic, &v)
	return offset, nil
}

func (x *SpaceGetFocusDynamicReply) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Time, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Dynamic) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Dynamic[number], err)
}

func (x *Dynamic) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *Dynamic) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthorId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *Dynamic) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Dynamic) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Info, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Dynamic) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ImageUrl = append(x.ImageUrl, v)
	return offset, err
}

func (x *Dynamic) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v uint64
			v, offset, err = fastpb.ReadUint64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.CommentList = append(x.CommentList, v)
			return offset, err
		})
	return offset, err
}

func (x *SpacePushDynamicReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SpacePushDynamicReq[number], err)
}

func (x *SpacePushDynamicReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SpacePushDynamicReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Info, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SpacePushDynamicReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ImageUrl = append(x.ImageUrl, v)
	return offset, err
}

func (x *SpacePushDynamicReply) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SpacePushDynamicReply[number], err)
}

func (x *SpacePushDynamicReply) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SpacePushDynamicReply) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SpaceGetFocusDynamicReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SpaceGetFocusDynamicReq) fastWriteField1(buf []byte) (offset int) {
	if x.TargetID == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetTargetID())
	return offset
}

func (x *SpaceGetFocusDynamicReq) fastWriteField2(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetLimit())
	return offset
}

func (x *SpaceGetFocusDynamicReply) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SpaceGetFocusDynamicReply) fastWriteField1(buf []byte) (offset int) {
	if x.Dynamic == nil {
		return offset
	}
	for i := range x.GetDynamic() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetDynamic()[i])
	}
	return offset
}

func (x *SpaceGetFocusDynamicReply) fastWriteField2(buf []byte) (offset int) {
	if x.Time == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTime())
	return offset
}

func (x *Dynamic) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Dynamic) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *Dynamic) fastWriteField2(buf []byte) (offset int) {
	if x.AuthorId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetAuthorId())
	return offset
}

func (x *Dynamic) fastWriteField3(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTitle())
	return offset
}

func (x *Dynamic) fastWriteField4(buf []byte) (offset int) {
	if x.Info == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetInfo())
	return offset
}

func (x *Dynamic) fastWriteField5(buf []byte) (offset int) {
	if len(x.ImageUrl) == 0 {
		return offset
	}
	for i := range x.GetImageUrl() {
		offset += fastpb.WriteString(buf[offset:], 5, x.GetImageUrl()[i])
	}
	return offset
}

func (x *Dynamic) fastWriteField6(buf []byte) (offset int) {
	if len(x.CommentList) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 6, len(x.GetCommentList()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteUint64(buf[offset:], numTagOrKey, x.GetCommentList()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *SpacePushDynamicReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SpacePushDynamicReq) fastWriteField3(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTitle())
	return offset
}

func (x *SpacePushDynamicReq) fastWriteField4(buf []byte) (offset int) {
	if x.Info == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetInfo())
	return offset
}

func (x *SpacePushDynamicReq) fastWriteField5(buf []byte) (offset int) {
	if len(x.ImageUrl) == 0 {
		return offset
	}
	for i := range x.GetImageUrl() {
		offset += fastpb.WriteString(buf[offset:], 5, x.GetImageUrl()[i])
	}
	return offset
}

func (x *SpacePushDynamicReply) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SpacePushDynamicReply) fastWriteField1(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMsg())
	return offset
}

func (x *SpacePushDynamicReply) fastWriteField2(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCode())
	return offset
}

func (x *SpaceGetFocusDynamicReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SpaceGetFocusDynamicReq) sizeField1() (n int) {
	if x.TargetID == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetTargetID())
	return n
}

func (x *SpaceGetFocusDynamicReq) sizeField2() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetLimit())
	return n
}

func (x *SpaceGetFocusDynamicReply) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SpaceGetFocusDynamicReply) sizeField1() (n int) {
	if x.Dynamic == nil {
		return n
	}
	for i := range x.GetDynamic() {
		n += fastpb.SizeMessage(1, x.GetDynamic()[i])
	}
	return n
}

func (x *SpaceGetFocusDynamicReply) sizeField2() (n int) {
	if x.Time == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTime())
	return n
}

func (x *Dynamic) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Dynamic) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetID())
	return n
}

func (x *Dynamic) sizeField2() (n int) {
	if x.AuthorId == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetAuthorId())
	return n
}

func (x *Dynamic) sizeField3() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetTitle())
	return n
}

func (x *Dynamic) sizeField4() (n int) {
	if x.Info == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetInfo())
	return n
}

func (x *Dynamic) sizeField5() (n int) {
	if len(x.ImageUrl) == 0 {
		return n
	}
	for i := range x.GetImageUrl() {
		n += fastpb.SizeString(5, x.GetImageUrl()[i])
	}
	return n
}

func (x *Dynamic) sizeField6() (n int) {
	if len(x.CommentList) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(6, len(x.GetCommentList()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeUint64(numTagOrKey, x.GetCommentList()[numIdxOrVal])
			return n
		})
	return n
}

func (x *SpacePushDynamicReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SpacePushDynamicReq) sizeField3() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetTitle())
	return n
}

func (x *SpacePushDynamicReq) sizeField4() (n int) {
	if x.Info == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetInfo())
	return n
}

func (x *SpacePushDynamicReq) sizeField5() (n int) {
	if len(x.ImageUrl) == 0 {
		return n
	}
	for i := range x.GetImageUrl() {
		n += fastpb.SizeString(5, x.GetImageUrl()[i])
	}
	return n
}

func (x *SpacePushDynamicReply) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SpacePushDynamicReply) sizeField1() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMsg())
	return n
}

func (x *SpacePushDynamicReply) sizeField2() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCode())
	return n
}

var fieldIDToName_SpaceGetFocusDynamicReq = map[int32]string{
	1: "TargetID",
	2: "Limit",
}

var fieldIDToName_SpaceGetFocusDynamicReply = map[int32]string{
	1: "Dynamic",
	2: "Time",
}

var fieldIDToName_Dynamic = map[int32]string{
	1: "ID",
	2: "AuthorId",
	3: "Title",
	4: "Info",
	5: "ImageUrl",
	6: "CommentList",
}

var fieldIDToName_SpacePushDynamicReq = map[int32]string{
	3: "Title",
	4: "Info",
	5: "ImageUrl",
}

var fieldIDToName_SpacePushDynamicReply = map[int32]string{
	1: "Msg",
	2: "Code",
}
