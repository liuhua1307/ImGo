// Code generated by Kitex v0.10.3. DO NOT EDIT.

package chat

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	api "github.com/liuhua1307/ImGo/rpc/chat/kitex_gen/api"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for domain method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Send": kitex.NewMethodInfo(
		sendHandler,
		newSendArgs,
		newSendResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetMessageList": kitex.NewMethodInfo(
		getMessageListHandler,
		newGetMessageListArgs,
		newGetMessageListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	chatServiceInfo                = NewServiceInfo()
	chatServiceInfoForClient       = NewServiceInfoForClient()
	chatServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return chatServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return chatServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return chatServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "Chat"
	handlerType := (*api.Chat)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "chat",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func sendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.ChatSendReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.Chat).Send(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendArgs:
		success, err := handler.(api.Chat).Send(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendArgs() interface{} {
	return &SendArgs{}
}

func newSendResult() interface{} {
	return &SendResult{}
}

type SendArgs struct {
	Req *api.ChatSendReq
}

func (p *SendArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.ChatSendReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendArgs) Unmarshal(in []byte) error {
	msg := new(api.ChatSendReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendArgs_Req_DEFAULT *api.ChatSendReq

func (p *SendArgs) GetReq() *api.ChatSendReq {
	if !p.IsSetReq() {
		return SendArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendResult struct {
	Success *api.ChatSendReply
}

var SendResult_Success_DEFAULT *api.ChatSendReply

func (p *SendResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.ChatSendReply)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendResult) Unmarshal(in []byte) error {
	msg := new(api.ChatSendReply)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendResult) GetSuccess() *api.ChatSendReply {
	if !p.IsSetSuccess() {
		return SendResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.ChatSendReply)
}

func (p *SendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendResult) GetResult() interface{} {
	return p.Success
}

func getMessageListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(api.ChatGetMessageListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(api.Chat).GetMessageList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMessageListArgs:
		success, err := handler.(api.Chat).GetMessageList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMessageListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMessageListArgs() interface{} {
	return &GetMessageListArgs{}
}

func newGetMessageListResult() interface{} {
	return &GetMessageListResult{}
}

type GetMessageListArgs struct {
	Req *api.ChatGetMessageListReq
}

func (p *GetMessageListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(api.ChatGetMessageListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMessageListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMessageListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMessageListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMessageListArgs) Unmarshal(in []byte) error {
	msg := new(api.ChatGetMessageListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMessageListArgs_Req_DEFAULT *api.ChatGetMessageListReq

func (p *GetMessageListArgs) GetReq() *api.ChatGetMessageListReq {
	if !p.IsSetReq() {
		return GetMessageListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMessageListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMessageListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMessageListResult struct {
	Success *api.ChatGetMessageListReply
}

var GetMessageListResult_Success_DEFAULT *api.ChatGetMessageListReply

func (p *GetMessageListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(api.ChatGetMessageListReply)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMessageListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMessageListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMessageListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMessageListResult) Unmarshal(in []byte) error {
	msg := new(api.ChatGetMessageListReply)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMessageListResult) GetSuccess() *api.ChatGetMessageListReply {
	if !p.IsSetSuccess() {
		return GetMessageListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMessageListResult) SetSuccess(x interface{}) {
	p.Success = x.(*api.ChatGetMessageListReply)
}

func (p *GetMessageListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMessageListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Send(ctx context.Context, Req *api.ChatSendReq) (r *api.ChatSendReply, err error) {
	var _args SendArgs
	_args.Req = Req
	var _result SendResult
	if err = p.c.Call(ctx, "Send", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMessageList(ctx context.Context, Req *api.ChatGetMessageListReq) (r *api.ChatGetMessageListReply, err error) {
	var _args GetMessageListArgs
	_args.Req = Req
	var _result GetMessageListResult
	if err = p.c.Call(ctx, "GetMessageList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
