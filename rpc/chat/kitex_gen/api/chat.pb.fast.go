// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *ChatGetMessageListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ChatGetMessageListReq[number], err)
}

func (x *ChatGetMessageListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.RoomId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *ChatGetMessageListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *Message) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Message[number], err)
}

func (x *Message) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.RoomId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *Message) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Time, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Info, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *Message) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.IsReply, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Message) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ReplyId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *ChatGetMessageListReply) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ChatGetMessageListReply[number], err)
}

func (x *ChatGetMessageListReply) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Message = append(x.Message, &v)
	return offset, nil
}

func (x *ChatGetMessageListReply) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *ChatGetMessageListReply) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ChatSendReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ChatSendReq[number], err)
}

func (x *ChatSendReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FromID, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *ChatSendReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ToID, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *ChatSendReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ChatSendReply) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ChatSendReply[number], err)
}

func (x *ChatSendReply) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *ChatSendReply) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ChatGetMessageListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ChatGetMessageListReq) fastWriteField1(buf []byte) (offset int) {
	if x.RoomId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetRoomId())
	return offset
}

func (x *ChatGetMessageListReq) fastWriteField2(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 2, x.GetLimit())
	return offset
}

func (x *Message) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Message) fastWriteField1(buf []byte) (offset int) {
	if x.RoomId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetRoomId())
	return offset
}

func (x *Message) fastWriteField2(buf []byte) (offset int) {
	if x.Time == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTime())
	return offset
}

func (x *Message) fastWriteField3(buf []byte) (offset int) {
	if x.Info == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetInfo())
	return offset
}

func (x *Message) fastWriteField4(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 4, x.GetID())
	return offset
}

func (x *Message) fastWriteField5(buf []byte) (offset int) {
	if !x.IsReply {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.GetIsReply())
	return offset
}

func (x *Message) fastWriteField6(buf []byte) (offset int) {
	if x.ReplyId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 6, x.GetReplyId())
	return offset
}

func (x *ChatGetMessageListReply) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ChatGetMessageListReply) fastWriteField1(buf []byte) (offset int) {
	if x.Message == nil {
		return offset
	}
	for i := range x.GetMessage() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMessage()[i])
	}
	return offset
}

func (x *ChatGetMessageListReply) fastWriteField2(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetCode())
	return offset
}

func (x *ChatGetMessageListReply) fastWriteField3(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMsg())
	return offset
}

func (x *ChatSendReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ChatSendReq) fastWriteField1(buf []byte) (offset int) {
	if x.FromID == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetFromID())
	return offset
}

func (x *ChatSendReq) fastWriteField2(buf []byte) (offset int) {
	if x.ToID == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetToID())
	return offset
}

func (x *ChatSendReq) fastWriteField3(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMsg())
	return offset
}

func (x *ChatSendReply) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ChatSendReply) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ChatSendReply) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *ChatGetMessageListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ChatGetMessageListReq) sizeField1() (n int) {
	if x.RoomId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetRoomId())
	return n
}

func (x *ChatGetMessageListReq) sizeField2() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeUint64(2, x.GetLimit())
	return n
}

func (x *Message) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Message) sizeField1() (n int) {
	if x.RoomId == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetRoomId())
	return n
}

func (x *Message) sizeField2() (n int) {
	if x.Time == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTime())
	return n
}

func (x *Message) sizeField3() (n int) {
	if x.Info == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetInfo())
	return n
}

func (x *Message) sizeField4() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeUint32(4, x.GetID())
	return n
}

func (x *Message) sizeField5() (n int) {
	if !x.IsReply {
		return n
	}
	n += fastpb.SizeBool(5, x.GetIsReply())
	return n
}

func (x *Message) sizeField6() (n int) {
	if x.ReplyId == 0 {
		return n
	}
	n += fastpb.SizeUint32(6, x.GetReplyId())
	return n
}

func (x *ChatGetMessageListReply) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ChatGetMessageListReply) sizeField1() (n int) {
	if x.Message == nil {
		return n
	}
	for i := range x.GetMessage() {
		n += fastpb.SizeMessage(1, x.GetMessage()[i])
	}
	return n
}

func (x *ChatGetMessageListReply) sizeField2() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetCode())
	return n
}

func (x *ChatGetMessageListReply) sizeField3() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMsg())
	return n
}

func (x *ChatSendReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ChatSendReq) sizeField1() (n int) {
	if x.FromID == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetFromID())
	return n
}

func (x *ChatSendReq) sizeField2() (n int) {
	if x.ToID == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetToID())
	return n
}

func (x *ChatSendReq) sizeField3() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMsg())
	return n
}

func (x *ChatSendReply) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ChatSendReply) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetCode())
	return n
}

func (x *ChatSendReply) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

var fieldIDToName_ChatGetMessageListReq = map[int32]string{
	1: "RoomId",
	2: "Limit",
}

var fieldIDToName_Message = map[int32]string{
	1: "RoomId",
	2: "Time",
	3: "Info",
	4: "ID",
	5: "IsReply",
	6: "ReplyId",
}

var fieldIDToName_ChatGetMessageListReply = map[int32]string{
	1: "Message",
	2: "Code",
	3: "Msg",
}

var fieldIDToName_ChatSendReq = map[int32]string{
	1: "FromID",
	2: "ToID",
	3: "Msg",
}

var fieldIDToName_ChatSendReply = map[int32]string{
	1: "Code",
	2: "Msg",
}
